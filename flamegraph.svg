<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="148413"><g><title>ntdll`RtlImpersonateSelfEx (15 samples, 0.01%)</title><rect x="0.0155%" y="309" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="23" fg:w="15"/><text x="0.2655%" y="319.50"></text></g><g><title>ntdll`LdrInitializeThunk (40 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0270%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="40"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`LdrInitializeThunk (39 samples, 0.03%)</title><rect x="0.0007%" y="357" width="0.0263%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="39"/><text x="0.2507%" y="367.50"></text></g><g><title>ntdll`EtwLogTraceEvent (39 samples, 0.03%)</title><rect x="0.0007%" y="341" width="0.0263%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="39"/><text x="0.2507%" y="351.50"></text></g><g><title>ntdll`EtwLogTraceEvent (39 samples, 0.03%)</title><rect x="0.0007%" y="325" width="0.0263%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="39"/><text x="0.2507%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (36 samples, 0.02%)</title><rect x="1.4143%" y="117" width="0.0243%" height="15" fill="rgb(232,128,0)" fg:x="2099" fg:w="36"/><text x="1.6643%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (34 samples, 0.02%)</title><rect x="1.4156%" y="101" width="0.0229%" height="15" fill="rgb(207,160,47)" fg:x="2101" fg:w="34"/><text x="1.6656%" y="111.50"></text></g><g><title>ga-permutation`ga_permutation::ga::fitness_function::impl$0::get_fitnesses (2,056 samples, 1.39%)</title><rect x="0.0620%" y="213" width="1.3853%" height="15" fill="rgb(228,23,34)" fg:x="92" fg:w="2056"/><text x="0.3120%" y="223.50"></text></g><g><title>ga-permutation`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve_for_push (71 samples, 0.05%)</title><rect x="1.3995%" y="197" width="0.0478%" height="15" fill="rgb(218,30,26)" fg:x="2077" fg:w="71"/><text x="1.6495%" y="207.50"></text></g><g><title>ga-permutation`alloc::raw_vec::finish_grow (70 samples, 0.05%)</title><rect x="1.4001%" y="181" width="0.0472%" height="15" fill="rgb(220,122,19)" fg:x="2078" fg:w="70"/><text x="1.6501%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (62 samples, 0.04%)</title><rect x="1.4055%" y="165" width="0.0418%" height="15" fill="rgb(250,228,42)" fg:x="2086" fg:w="62"/><text x="1.6555%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (60 samples, 0.04%)</title><rect x="1.4069%" y="149" width="0.0404%" height="15" fill="rgb(240,193,28)" fg:x="2088" fg:w="60"/><text x="1.6569%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (54 samples, 0.04%)</title><rect x="1.4109%" y="133" width="0.0364%" height="15" fill="rgb(216,20,37)" fg:x="2094" fg:w="54"/><text x="1.6609%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (92 samples, 0.06%)</title><rect x="5.3486%" y="85" width="0.0620%" height="15" fill="rgb(206,188,39)" fg:x="7938" fg:w="92"/><text x="5.5986%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (86 samples, 0.06%)</title><rect x="5.3526%" y="69" width="0.0579%" height="15" fill="rgb(217,207,13)" fg:x="7944" fg:w="86"/><text x="5.6026%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (108 samples, 0.07%)</title><rect x="5.3392%" y="117" width="0.0728%" height="15" fill="rgb(231,73,38)" fg:x="7924" fg:w="108"/><text x="5.5892%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (107 samples, 0.07%)</title><rect x="5.3398%" y="101" width="0.0721%" height="15" fill="rgb(225,20,46)" fg:x="7925" fg:w="107"/><text x="5.5898%" y="111.50"></text></g><g><title>ga-permutation`ga_permutation::ga::penalty_function::impl$0::get_penalties (5,893 samples, 3.97%)</title><rect x="1.4473%" y="213" width="3.9707%" height="15" fill="rgb(210,31,41)" fg:x="2148" fg:w="5893"/><text x="1.6973%" y="223.50">ga-p..</text></g><g><title>ga-permutation`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve_for_push (139 samples, 0.09%)</title><rect x="5.3243%" y="197" width="0.0937%" height="15" fill="rgb(221,200,47)" fg:x="7902" fg:w="139"/><text x="5.5743%" y="207.50"></text></g><g><title>ga-permutation`alloc::raw_vec::finish_grow (137 samples, 0.09%)</title><rect x="5.3257%" y="181" width="0.0923%" height="15" fill="rgb(226,26,5)" fg:x="7904" fg:w="137"/><text x="5.5757%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (127 samples, 0.09%)</title><rect x="5.3324%" y="165" width="0.0856%" height="15" fill="rgb(249,33,26)" fg:x="7914" fg:w="127"/><text x="5.5824%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (126 samples, 0.08%)</title><rect x="5.3331%" y="149" width="0.0849%" height="15" fill="rgb(235,183,28)" fg:x="7915" fg:w="126"/><text x="5.5831%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (124 samples, 0.08%)</title><rect x="5.3344%" y="133" width="0.0836%" height="15" fill="rgb(221,5,38)" fg:x="7917" fg:w="124"/><text x="5.5844%" y="143.50"></text></g><g><title>ga-permutation`ga_permutation::ga::GA::eval_pop (7,962 samples, 5.36%)</title><rect x="0.0566%" y="229" width="5.3648%" height="15" fill="rgb(247,18,42)" fg:x="84" fg:w="7962"/><text x="0.3066%" y="239.50">ga-perm..</text></g><g><title>KERNEL32`HeapFree (35 samples, 0.02%)</title><rect x="64.5678%" y="213" width="0.0236%" height="15" fill="rgb(241,131,45)" fg:x="95827" fg:w="35"/><text x="64.8178%" y="223.50"></text></g><g><title>VCRUNTIME140`memcpy (277 samples, 0.19%)</title><rect x="64.5914%" y="213" width="0.1866%" height="15" fill="rgb(249,31,29)" fg:x="95862" fg:w="277"/><text x="64.8414%" y="223.50"></text></g><g><title>ga-permutation`std::alloc::__default_lib_allocator::__rdl_alloc (68 samples, 0.05%)</title><rect x="64.9768%" y="181" width="0.0458%" height="15" fill="rgb(225,111,53)" fg:x="96434" fg:w="68"/><text x="65.2268%" y="191.50"></text></g><g><title>ntdll`ExpInterlockedPopEntrySListEnd (17 samples, 0.01%)</title><rect x="65.9349%" y="149" width="0.0115%" height="15" fill="rgb(238,160,17)" fg:x="97856" fg:w="17"/><text x="66.1849%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,438 samples, 2.32%)</title><rect x="66.2806%" y="133" width="2.3165%" height="15" fill="rgb(214,148,48)" fg:x="98369" fg:w="3438"/><text x="66.5306%" y="143.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (3,946 samples, 2.66%)</title><rect x="65.9471%" y="149" width="2.6588%" height="15" fill="rgb(232,36,49)" fg:x="97874" fg:w="3946"/><text x="66.1971%" y="159.50">nt..</text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (53 samples, 0.04%)</title><rect x="68.6058%" y="149" width="0.0357%" height="15" fill="rgb(209,103,24)" fg:x="101820" fg:w="53"/><text x="68.8558%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (26 samples, 0.02%)</title><rect x="68.6240%" y="133" width="0.0175%" height="15" fill="rgb(229,88,8)" fg:x="101847" fg:w="26"/><text x="68.8740%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (25 samples, 0.02%)</title><rect x="68.6247%" y="117" width="0.0168%" height="15" fill="rgb(213,181,19)" fg:x="101848" fg:w="25"/><text x="68.8747%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.02%)</title><rect x="68.6254%" y="101" width="0.0162%" height="15" fill="rgb(254,191,54)" fg:x="101849" fg:w="24"/><text x="68.8754%" y="111.50"></text></g><g><title>ga-permutation`alloc::raw_vec::RawVec&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;enum2$ (5,913 samples, 3.98%)</title><rect x="64.7868%" y="213" width="3.9842%" height="15" fill="rgb(241,83,37)" fg:x="96152" fg:w="5913"/><text x="65.0368%" y="223.50">ga-p..</text></g><g><title>ga-permutation`alloc::raw_vec::finish_grow (5,726 samples, 3.86%)</title><rect x="64.9128%" y="197" width="3.8582%" height="15" fill="rgb(233,36,39)" fg:x="96339" fg:w="5726"/><text x="65.1628%" y="207.50">ga-p..</text></g><g><title>ntdll`RtlAllocateHeap (5,563 samples, 3.75%)</title><rect x="65.0226%" y="181" width="3.7483%" height="15" fill="rgb(226,3,54)" fg:x="96502" fg:w="5563"/><text x="65.2726%" y="191.50">ntdl..</text></g><g><title>ntdll`RtlAllocateHeap (5,158 samples, 3.48%)</title><rect x="65.2955%" y="165" width="3.4754%" height="15" fill="rgb(245,192,40)" fg:x="96907" fg:w="5158"/><text x="65.5455%" y="175.50">ntd..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (181 samples, 0.12%)</title><rect x="68.6490%" y="149" width="0.1220%" height="15" fill="rgb(238,167,29)" fg:x="101884" fg:w="181"/><text x="68.8990%" y="159.50"></text></g><g><title>ga-permutation`core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState,ref$&lt;enum2$ (9,009 samples, 6.07%)</title><rect x="68.7709%" y="213" width="6.0702%" height="15" fill="rgb(232,182,51)" fg:x="102065" fg:w="9009"/><text x="69.0209%" y="223.50">ga-permu..</text></g><g><title>ga-permutation`core::hash::Hasher::write_usize (4,910 samples, 3.31%)</title><rect x="71.5328%" y="197" width="3.3083%" height="15" fill="rgb(231,60,39)" fg:x="106164" fg:w="4910"/><text x="71.7828%" y="207.50">ga-..</text></g><g><title>ga-permutation`core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState,ref$&lt;enum2$ (845 samples, 0.57%)</title><rect x="75.0675%" y="197" width="0.5694%" height="15" fill="rgb(208,69,12)" fg:x="111410" fg:w="845"/><text x="75.3175%" y="207.50"></text></g><g><title>ga-permutation`core::hash::Hasher::write_usize (471 samples, 0.32%)</title><rect x="75.3195%" y="181" width="0.3174%" height="15" fill="rgb(235,93,37)" fg:x="111784" fg:w="471"/><text x="75.5695%" y="191.50"></text></g><g><title>ga-permutation`hashbrown::map::HashMap&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::alloc::Global&gt;,std::collections::hash::map::RandomState,alloc::alloc::Global&gt;::insert&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$ (1,516 samples, 1.02%)</title><rect x="74.8412%" y="213" width="1.0215%" height="15" fill="rgb(213,116,39)" fg:x="111074" fg:w="1516"/><text x="75.0912%" y="223.50"></text></g><g><title>ga-permutation`hashbrown::raw::RawTable&lt;tuple$&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$ (335 samples, 0.23%)</title><rect x="75.6369%" y="197" width="0.2257%" height="15" fill="rgb(222,207,29)" fg:x="112255" fg:w="335"/><text x="75.8869%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (154 samples, 0.10%)</title><rect x="75.8835%" y="165" width="0.1038%" height="15" fill="rgb(206,96,30)" fg:x="112621" fg:w="154"/><text x="76.1335%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (139 samples, 0.09%)</title><rect x="75.8936%" y="149" width="0.0937%" height="15" fill="rgb(218,138,4)" fg:x="112636" fg:w="139"/><text x="76.1436%" y="159.50"></text></g><g><title>ga-permutation`hashbrown::raw::RawTable&lt;tuple$&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::with_capacity&lt;tuple$&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$ (191 samples, 0.13%)</title><rect x="75.8626%" y="213" width="0.1287%" height="15" fill="rgb(250,191,14)" fg:x="112590" fg:w="191"/><text x="76.1126%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (183 samples, 0.12%)</title><rect x="75.8680%" y="197" width="0.1233%" height="15" fill="rgb(239,60,40)" fg:x="112598" fg:w="183"/><text x="76.1180%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (180 samples, 0.12%)</title><rect x="75.8700%" y="181" width="0.1213%" height="15" fill="rgb(206,27,48)" fg:x="112601" fg:w="180"/><text x="76.1200%" y="191.50"></text></g><g><title>KERNEL32`HeapFree (17 samples, 0.01%)</title><rect x="76.0439%" y="197" width="0.0115%" height="15" fill="rgb(225,35,8)" fg:x="112859" fg:w="17"/><text x="76.2939%" y="207.50"></text></g><g><title>ga-permutation`std::alloc::__default_lib_allocator::__rdl_dealloc (23 samples, 0.02%)</title><rect x="76.0553%" y="197" width="0.0155%" height="15" fill="rgb(250,213,24)" fg:x="112876" fg:w="23"/><text x="76.3053%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (315 samples, 0.21%)</title><rect x="76.1382%" y="181" width="0.2122%" height="15" fill="rgb(247,123,22)" fg:x="112999" fg:w="315"/><text x="76.3882%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (29 samples, 0.02%)</title><rect x="76.3309%" y="165" width="0.0195%" height="15" fill="rgb(231,138,38)" fg:x="113285" fg:w="29"/><text x="76.5809%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (16 samples, 0.01%)</title><rect x="76.9097%" y="165" width="0.0108%" height="15" fill="rgb(231,145,46)" fg:x="114144" fg:w="16"/><text x="77.1597%" y="175.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (20 samples, 0.01%)</title><rect x="76.9205%" y="165" width="0.0135%" height="15" fill="rgb(251,118,11)" fg:x="114160" fg:w="20"/><text x="77.1705%" y="175.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (17 samples, 0.01%)</title><rect x="76.9225%" y="149" width="0.0115%" height="15" fill="rgb(217,147,25)" fg:x="114163" fg:w="17"/><text x="77.1725%" y="159.50"></text></g><g><title>ga-permutation`hashbrown::raw::impl$17::drop&lt;tuple$&lt;enum2$&lt;ga_permutation::ga::problem::SolutionField&gt;,alloc::vec::Vec&lt;enum2$ (1,426 samples, 0.96%)</title><rect x="75.9913%" y="213" width="0.9608%" height="15" fill="rgb(247,81,37)" fg:x="112781" fg:w="1426"/><text x="76.2413%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (1,308 samples, 0.88%)</title><rect x="76.0708%" y="197" width="0.8813%" height="15" fill="rgb(209,12,38)" fg:x="112899" fg:w="1308"/><text x="76.3208%" y="207.50"></text></g><g><title>ntdll`RtlMoveMemory (893 samples, 0.60%)</title><rect x="76.3505%" y="181" width="0.6017%" height="15" fill="rgb(227,1,9)" fg:x="113314" fg:w="893"/><text x="76.6005%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (27 samples, 0.02%)</title><rect x="76.9340%" y="165" width="0.0182%" height="15" fill="rgb(248,47,43)" fg:x="114180" fg:w="27"/><text x="77.1840%" y="175.50"></text></g><g><title>ga-permutation`rand_chacha::guts::refill_wide (37 samples, 0.02%)</title><rect x="77.0492%" y="197" width="0.0249%" height="15" fill="rgb(221,10,30)" fg:x="114351" fg:w="37"/><text x="77.2992%" y="207.50"></text></g><g><title>ga-permutation`rand::rng::Rng::gen (377 samples, 0.25%)</title><rect x="76.9522%" y="213" width="0.2540%" height="15" fill="rgb(210,229,1)" fg:x="114207" fg:w="377"/><text x="77.2022%" y="223.50"></text></g><g><title>ga-permutation`rand_chacha::guts::refill_wide::impl_avx2 (196 samples, 0.13%)</title><rect x="77.0741%" y="197" width="0.1321%" height="15" fill="rgb(222,148,37)" fg:x="114388" fg:w="196"/><text x="77.3241%" y="207.50"></text></g><g><title>ga-permutation`std::alloc::__default_lib_allocator::__rdl_alloc (104 samples, 0.07%)</title><rect x="77.2102%" y="213" width="0.0701%" height="15" fill="rgb(234,67,33)" fg:x="114590" fg:w="104"/><text x="77.4602%" y="223.50"></text></g><g><title>ga-permutation`std::alloc::__default_lib_allocator::__rdl_dealloc (22 samples, 0.01%)</title><rect x="77.2803%" y="213" width="0.0148%" height="15" fill="rgb(247,98,35)" fg:x="114694" fg:w="22"/><text x="77.5303%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (966 samples, 0.65%)</title><rect x="78.4264%" y="181" width="0.6509%" height="15" fill="rgb(247,138,52)" fg:x="116395" fg:w="966"/><text x="78.6764%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (235 samples, 0.16%)</title><rect x="78.9190%" y="165" width="0.1583%" height="15" fill="rgb(213,79,30)" fg:x="117126" fg:w="235"/><text x="79.1690%" y="175.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (34 samples, 0.02%)</title><rect x="79.0874%" y="101" width="0.0229%" height="15" fill="rgb(246,177,23)" fg:x="117376" fg:w="34"/><text x="79.3374%" y="111.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (50 samples, 0.03%)</title><rect x="79.0773%" y="181" width="0.0337%" height="15" fill="rgb(230,62,27)" fg:x="117361" fg:w="50"/><text x="79.3273%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (48 samples, 0.03%)</title><rect x="79.0787%" y="165" width="0.0323%" height="15" fill="rgb(216,154,8)" fg:x="117363" fg:w="48"/><text x="79.3287%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (48 samples, 0.03%)</title><rect x="79.0787%" y="149" width="0.0323%" height="15" fill="rgb(244,35,45)" fg:x="117363" fg:w="48"/><text x="79.3287%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (48 samples, 0.03%)</title><rect x="79.0787%" y="133" width="0.0323%" height="15" fill="rgb(251,115,12)" fg:x="117363" fg:w="48"/><text x="79.3287%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (36 samples, 0.02%)</title><rect x="79.0867%" y="117" width="0.0243%" height="15" fill="rgb(240,54,50)" fg:x="117375" fg:w="36"/><text x="79.3367%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (2,897 samples, 1.95%)</title><rect x="77.3005%" y="213" width="1.9520%" height="15" fill="rgb(233,84,52)" fg:x="114724" fg:w="2897"/><text x="77.5505%" y="223.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (2,330 samples, 1.57%)</title><rect x="77.6825%" y="197" width="1.5699%" height="15" fill="rgb(207,117,47)" fg:x="115291" fg:w="2330"/><text x="77.9325%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (206 samples, 0.14%)</title><rect x="79.1137%" y="181" width="0.1388%" height="15" fill="rgb(249,43,39)" fg:x="117415" fg:w="206"/><text x="79.3637%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (286 samples, 0.19%)</title><rect x="79.3623%" y="197" width="0.1927%" height="15" fill="rgb(209,38,44)" fg:x="117784" fg:w="286"/><text x="79.6123%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (29 samples, 0.02%)</title><rect x="79.5355%" y="181" width="0.0195%" height="15" fill="rgb(236,212,23)" fg:x="118041" fg:w="29"/><text x="79.7855%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (15 samples, 0.01%)</title><rect x="80.0853%" y="181" width="0.0101%" height="15" fill="rgb(242,79,21)" fg:x="118857" fg:w="15"/><text x="80.3353%" y="191.50"></text></g><g><title>ga-permutation`ga_permutation::ga::crossover::impl$2::cross_over (111,112 samples, 74.87%)</title><rect x="5.4214%" y="229" width="74.8668%" height="15" fill="rgb(211,96,35)" fg:x="8046" fg:w="111112"/><text x="5.6714%" y="239.50">ga-permutation`ga_permutation::ga::crossover::impl$2::cross_over</text></g><g><title>ntdll`RtlFreeHeap (1,537 samples, 1.04%)</title><rect x="79.2525%" y="213" width="1.0356%" height="15" fill="rgb(253,215,40)" fg:x="117621" fg:w="1537"/><text x="79.5025%" y="223.50"></text></g><g><title>ntdll`RtlMoveMemory (1,088 samples, 0.73%)</title><rect x="79.5550%" y="197" width="0.7331%" height="15" fill="rgb(211,81,21)" fg:x="118070" fg:w="1088"/><text x="79.8050%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (285 samples, 0.19%)</title><rect x="80.0961%" y="181" width="0.1920%" height="15" fill="rgb(208,190,38)" fg:x="118873" fg:w="285"/><text x="80.3461%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (285 samples, 0.19%)</title><rect x="80.0961%" y="165" width="0.1920%" height="15" fill="rgb(235,213,38)" fg:x="118873" fg:w="285"/><text x="80.3461%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (285 samples, 0.19%)</title><rect x="80.0961%" y="149" width="0.1920%" height="15" fill="rgb(237,122,38)" fg:x="118873" fg:w="285"/><text x="80.3461%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (285 samples, 0.19%)</title><rect x="80.0961%" y="133" width="0.1920%" height="15" fill="rgb(244,218,35)" fg:x="118873" fg:w="285"/><text x="80.3461%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (285 samples, 0.19%)</title><rect x="80.0961%" y="117" width="0.1920%" height="15" fill="rgb(240,68,47)" fg:x="118873" fg:w="285"/><text x="80.3461%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (284 samples, 0.19%)</title><rect x="80.0968%" y="101" width="0.1914%" height="15" fill="rgb(210,16,53)" fg:x="118874" fg:w="284"/><text x="80.3468%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (274 samples, 0.18%)</title><rect x="80.1035%" y="85" width="0.1846%" height="15" fill="rgb(235,124,12)" fg:x="118884" fg:w="274"/><text x="80.3535%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (272 samples, 0.18%)</title><rect x="80.1048%" y="69" width="0.1833%" height="15" fill="rgb(224,169,11)" fg:x="118886" fg:w="272"/><text x="80.3548%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (268 samples, 0.18%)</title><rect x="80.1075%" y="53" width="0.1806%" height="15" fill="rgb(250,166,2)" fg:x="118890" fg:w="268"/><text x="80.3575%" y="63.50"></text></g><g><title>ntdll`ZwFreeVirtualMemory (265 samples, 0.18%)</title><rect x="80.1096%" y="37" width="0.1786%" height="15" fill="rgb(242,216,29)" fg:x="118893" fg:w="265"/><text x="80.3596%" y="47.50"></text></g><g><title>VCRUNTIME140`memcpy (380 samples, 0.26%)</title><rect x="84.1173%" y="213" width="0.2560%" height="15" fill="rgb(230,116,27)" fg:x="124841" fg:w="380"/><text x="84.3673%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.01%)</title><rect x="84.3875%" y="133" width="0.0141%" height="15" fill="rgb(228,99,48)" fg:x="125242" fg:w="21"/><text x="84.6375%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.01%)</title><rect x="84.3895%" y="117" width="0.0121%" height="15" fill="rgb(253,11,6)" fg:x="125245" fg:w="18"/><text x="84.6395%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (41 samples, 0.03%)</title><rect x="84.4016%" y="133" width="0.0276%" height="15" fill="rgb(247,143,39)" fg:x="125263" fg:w="41"/><text x="84.6516%" y="143.50"></text></g><g><title>ntdll`RtlMoveMemory (41 samples, 0.03%)</title><rect x="84.4016%" y="117" width="0.0276%" height="15" fill="rgb(236,97,10)" fg:x="125263" fg:w="41"/><text x="84.6516%" y="127.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (27 samples, 0.02%)</title><rect x="84.4111%" y="101" width="0.0182%" height="15" fill="rgb(233,208,19)" fg:x="125277" fg:w="27"/><text x="84.6611%" y="111.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (25 samples, 0.02%)</title><rect x="84.4124%" y="85" width="0.0168%" height="15" fill="rgb(216,164,2)" fg:x="125279" fg:w="25"/><text x="84.6624%" y="95.50"></text></g><g><title>ntdll`RtlFreeHeap (25 samples, 0.02%)</title><rect x="84.4124%" y="69" width="0.0168%" height="15" fill="rgb(220,129,5)" fg:x="125279" fg:w="25"/><text x="84.6624%" y="79.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (25 samples, 0.02%)</title><rect x="84.4124%" y="53" width="0.0168%" height="15" fill="rgb(242,17,10)" fg:x="125279" fg:w="25"/><text x="84.6624%" y="63.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (24 samples, 0.02%)</title><rect x="84.4131%" y="37" width="0.0162%" height="15" fill="rgb(242,107,0)" fg:x="125280" fg:w="24"/><text x="84.6631%" y="47.50"></text></g><g><title>ntdll`RtlReAllocateHeap (72 samples, 0.05%)</title><rect x="84.3848%" y="149" width="0.0485%" height="15" fill="rgb(251,28,31)" fg:x="125238" fg:w="72"/><text x="84.6348%" y="159.50"></text></g><g><title>ga-permutation`alloc::raw_vec::RawVec&lt;alloc::string::String,alloc::alloc::Global&gt;::reserve_for_push (89 samples, 0.06%)</title><rect x="84.3740%" y="213" width="0.0600%" height="15" fill="rgb(233,223,10)" fg:x="125222" fg:w="89"/><text x="84.6240%" y="223.50"></text></g><g><title>ga-permutation`alloc::raw_vec::finish_grow (86 samples, 0.06%)</title><rect x="84.3760%" y="197" width="0.0579%" height="15" fill="rgb(215,21,27)" fg:x="125225" fg:w="86"/><text x="84.6260%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (82 samples, 0.06%)</title><rect x="84.3787%" y="181" width="0.0553%" height="15" fill="rgb(232,23,21)" fg:x="125229" fg:w="82"/><text x="84.6287%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (76 samples, 0.05%)</title><rect x="84.3828%" y="165" width="0.0512%" height="15" fill="rgb(244,5,23)" fg:x="125235" fg:w="76"/><text x="84.6328%" y="175.50"></text></g><g><title>ga-permutation`rand::rng::Rng::gen (18 samples, 0.01%)</title><rect x="84.4340%" y="213" width="0.0121%" height="15" fill="rgb(226,81,46)" fg:x="125311" fg:w="18"/><text x="84.6840%" y="223.50"></text></g><g><title>ga-permutation`rand::rng::Rng::gen_range&lt;rand::rngs::thread::ThreadRng,u32,core::ops::range::Range (23 samples, 0.02%)</title><rect x="84.4461%" y="213" width="0.0155%" height="15" fill="rgb(247,70,30)" fg:x="125329" fg:w="23"/><text x="84.6961%" y="223.50"></text></g><g><title>bcrypt`BCryptGenRandom (33 samples, 0.02%)</title><rect x="85.5188%" y="133" width="0.0222%" height="15" fill="rgb(212,68,19)" fg:x="126921" fg:w="33"/><text x="85.7688%" y="143.50"></text></g><g><title>bcryptprimitives`GetHashInterface (33 samples, 0.02%)</title><rect x="85.5188%" y="117" width="0.0222%" height="15" fill="rgb(240,187,13)" fg:x="126921" fg:w="33"/><text x="85.7688%" y="127.50"></text></g><g><title>bcryptprimitives`GetHashInterface (32 samples, 0.02%)</title><rect x="85.5195%" y="101" width="0.0216%" height="15" fill="rgb(223,113,26)" fg:x="126922" fg:w="32"/><text x="85.7695%" y="111.50"></text></g><g><title>bcryptprimitives`ProcessPrng (31 samples, 0.02%)</title><rect x="85.5201%" y="85" width="0.0209%" height="15" fill="rgb(206,192,2)" fg:x="126923" fg:w="31"/><text x="85.7701%" y="95.50"></text></g><g><title>ga-permutation`rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;::reseed_and_generate (52 samples, 0.04%)</title><rect x="85.5094%" y="197" width="0.0350%" height="15" fill="rgb(241,108,4)" fg:x="126907" fg:w="52"/><text x="85.7594%" y="207.50"></text></g><g><title>ga-permutation`rand_core::os::impl$1::try_fill_bytes (48 samples, 0.03%)</title><rect x="85.5121%" y="181" width="0.0323%" height="15" fill="rgb(247,173,49)" fg:x="126911" fg:w="48"/><text x="85.7621%" y="191.50"></text></g><g><title>ga-permutation`getrandom::getrandom (46 samples, 0.03%)</title><rect x="85.5134%" y="165" width="0.0310%" height="15" fill="rgb(224,114,35)" fg:x="126913" fg:w="46"/><text x="85.7634%" y="175.50"></text></g><g><title>bcrypt`BCryptGenRandom (45 samples, 0.03%)</title><rect x="85.5141%" y="149" width="0.0303%" height="15" fill="rgb(245,159,27)" fg:x="126914" fg:w="45"/><text x="85.7641%" y="159.50"></text></g><g><title>ga-permutation`rand::rngs::adapter::reseeding::fork::get_fork_counter (19 samples, 0.01%)</title><rect x="85.5444%" y="197" width="0.0128%" height="15" fill="rgb(245,172,44)" fg:x="126959" fg:w="19"/><text x="85.7944%" y="207.50"></text></g><g><title>ga-permutation`rand_chacha::guts::refill_wide (130 samples, 0.09%)</title><rect x="85.5572%" y="197" width="0.0876%" height="15" fill="rgb(236,23,11)" fg:x="126978" fg:w="130"/><text x="85.8072%" y="207.50"></text></g><g><title>ga-permutation`rand::rng::Rng::sample (3,331 samples, 2.24%)</title><rect x="84.4616%" y="213" width="2.2444%" height="15" fill="rgb(205,117,38)" fg:x="125352" fg:w="3331"/><text x="84.7116%" y="223.50">g..</text></g><g><title>ga-permutation`rand_chacha::guts::refill_wide::impl_avx2 (1,575 samples, 1.06%)</title><rect x="85.6448%" y="197" width="1.0612%" height="15" fill="rgb(237,72,25)" fg:x="127108" fg:w="1575"/><text x="85.8948%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (127 samples, 0.09%)</title><rect x="87.1413%" y="165" width="0.0856%" height="15" fill="rgb(244,70,9)" fg:x="129329" fg:w="127"/><text x="87.3913%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (538 samples, 0.36%)</title><rect x="86.8650%" y="181" width="0.3625%" height="15" fill="rgb(217,125,39)" fg:x="128919" fg:w="538"/><text x="87.1150%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (42 samples, 0.03%)</title><rect x="87.2275%" y="181" width="0.0283%" height="15" fill="rgb(235,36,10)" fg:x="129457" fg:w="42"/><text x="87.4775%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (40 samples, 0.03%)</title><rect x="87.2289%" y="165" width="0.0270%" height="15" fill="rgb(251,123,47)" fg:x="129459" fg:w="40"/><text x="87.4789%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (39 samples, 0.03%)</title><rect x="87.2296%" y="149" width="0.0263%" height="15" fill="rgb(221,13,13)" fg:x="129460" fg:w="39"/><text x="87.4796%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (39 samples, 0.03%)</title><rect x="87.2296%" y="133" width="0.0263%" height="15" fill="rgb(238,131,9)" fg:x="129460" fg:w="39"/><text x="87.4796%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (25 samples, 0.02%)</title><rect x="87.2390%" y="117" width="0.0168%" height="15" fill="rgb(211,50,8)" fg:x="129474" fg:w="25"/><text x="87.4890%" y="127.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (25 samples, 0.02%)</title><rect x="87.2390%" y="101" width="0.0168%" height="15" fill="rgb(245,182,24)" fg:x="129474" fg:w="25"/><text x="87.4890%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (834 samples, 0.56%)</title><rect x="86.7134%" y="213" width="0.5619%" height="15" fill="rgb(242,14,37)" fg:x="128694" fg:w="834"/><text x="86.9634%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (774 samples, 0.52%)</title><rect x="86.7539%" y="197" width="0.5215%" height="15" fill="rgb(246,228,12)" fg:x="128754" fg:w="774"/><text x="87.0039%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (29 samples, 0.02%)</title><rect x="87.2558%" y="181" width="0.0195%" height="15" fill="rgb(213,55,15)" fg:x="129499" fg:w="29"/><text x="87.5058%" y="191.50"></text></g><g><title>ga-permutation`ga_permutation::ga::mutator::impl$6::mutate (10,452 samples, 7.04%)</title><rect x="80.2935%" y="229" width="7.0425%" height="15" fill="rgb(209,9,3)" fg:x="119166" fg:w="10452"/><text x="80.5435%" y="239.50">ga-permut..</text></g><g><title>ntdll`RtlFreeHeap (90 samples, 0.06%)</title><rect x="87.2754%" y="213" width="0.0606%" height="15" fill="rgb(230,59,30)" fg:x="129528" fg:w="90"/><text x="87.5254%" y="223.50"></text></g><g><title>ntdll`RtlMoveMemory (67 samples, 0.05%)</title><rect x="87.2909%" y="197" width="0.0451%" height="15" fill="rgb(209,121,21)" fg:x="129551" fg:w="67"/><text x="87.5409%" y="207.50"></text></g><g><title>VCRUNTIME140`memcpy (153 samples, 0.10%)</title><rect x="87.3454%" y="197" width="0.1031%" height="15" fill="rgb(220,109,13)" fg:x="129632" fg:w="153"/><text x="87.5954%" y="207.50"></text></g><g><title>ga-permutation`ga_permutation::ga::parent_selector::impl$1::select_parents (350 samples, 0.24%)</title><rect x="87.3360%" y="229" width="0.2358%" height="15" fill="rgb(232,18,1)" fg:x="129618" fg:w="350"/><text x="87.5860%" y="239.50"></text></g><g><title>ga-permutation`alloc::vec::impl$34::from (350 samples, 0.24%)</title><rect x="87.3360%" y="213" width="0.2358%" height="15" fill="rgb(215,41,42)" fg:x="129618" fg:w="350"/><text x="87.5860%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (178 samples, 0.12%)</title><rect x="87.4519%" y="197" width="0.1199%" height="15" fill="rgb(224,123,36)" fg:x="129790" fg:w="178"/><text x="87.7019%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (157 samples, 0.11%)</title><rect x="87.4661%" y="181" width="0.1058%" height="15" fill="rgb(240,125,3)" fg:x="129811" fg:w="157"/><text x="87.7161%" y="191.50"></text></g><g><title>ga-permutation`ga_permutation::ga::penalty_function::impl$0::get_penalties (2,809 samples, 1.89%)</title><rect x="87.5718%" y="229" width="1.8927%" height="15" fill="rgb(205,98,50)" fg:x="129968" fg:w="2809"/><text x="87.8218%" y="239.50">g..</text></g><g><title>ga-permutation`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve_for_push (27 samples, 0.02%)</title><rect x="89.4463%" y="213" width="0.0182%" height="15" fill="rgb(205,185,37)" fg:x="132750" fg:w="27"/><text x="89.6963%" y="223.50"></text></g><g><title>ga-permutation`alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="89.4470%" y="197" width="0.0175%" height="15" fill="rgb(238,207,15)" fg:x="132751" fg:w="26"/><text x="89.6970%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (24 samples, 0.02%)</title><rect x="89.4484%" y="181" width="0.0162%" height="15" fill="rgb(213,199,42)" fg:x="132753" fg:w="24"/><text x="89.6984%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (23 samples, 0.02%)</title><rect x="89.4490%" y="165" width="0.0155%" height="15" fill="rgb(235,201,11)" fg:x="132754" fg:w="23"/><text x="89.6990%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (20 samples, 0.01%)</title><rect x="89.4511%" y="149" width="0.0135%" height="15" fill="rgb(207,46,11)" fg:x="132757" fg:w="20"/><text x="89.7011%" y="159.50"></text></g><g><title>VCRUNTIME140`memcpy (823 samples, 0.55%)</title><rect x="97.7879%" y="213" width="0.5545%" height="15" fill="rgb(241,35,35)" fg:x="145130" fg:w="823"/><text x="98.0379%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (81 samples, 0.05%)</title><rect x="98.3546%" y="133" width="0.0546%" height="15" fill="rgb(243,32,47)" fg:x="145971" fg:w="81"/><text x="98.6046%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (89 samples, 0.06%)</title><rect x="98.3499%" y="149" width="0.0600%" height="15" fill="rgb(247,202,23)" fg:x="145964" fg:w="89"/><text x="98.5999%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (95 samples, 0.06%)</title><rect x="98.3465%" y="181" width="0.0640%" height="15" fill="rgb(219,102,11)" fg:x="145959" fg:w="95"/><text x="98.5965%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (94 samples, 0.06%)</title><rect x="98.3472%" y="165" width="0.0633%" height="15" fill="rgb(243,110,44)" fg:x="145960" fg:w="94"/><text x="98.5972%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (314 samples, 0.21%)</title><rect x="98.4280%" y="101" width="0.2116%" height="15" fill="rgb(222,74,54)" fg:x="146080" fg:w="314"/><text x="98.6780%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (300 samples, 0.20%)</title><rect x="98.4375%" y="85" width="0.2021%" height="15" fill="rgb(216,99,12)" fg:x="146094" fg:w="300"/><text x="98.6875%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (338 samples, 0.23%)</title><rect x="98.4166%" y="133" width="0.2277%" height="15" fill="rgb(226,22,26)" fg:x="146063" fg:w="338"/><text x="98.6666%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (336 samples, 0.23%)</title><rect x="98.4179%" y="117" width="0.2264%" height="15" fill="rgb(217,163,10)" fg:x="146065" fg:w="336"/><text x="98.6679%" y="127.50"></text></g><g><title>ga-permutation`alloc::raw_vec::RawVec&lt;alloc::string::String,alloc::alloc::Global&gt;::reserve_for_push (453 samples, 0.31%)</title><rect x="98.3425%" y="213" width="0.3052%" height="15" fill="rgb(213,25,53)" fg:x="145953" fg:w="453"/><text x="98.5925%" y="223.50"></text></g><g><title>ga-permutation`alloc::raw_vec::finish_grow (449 samples, 0.30%)</title><rect x="98.3452%" y="197" width="0.3025%" height="15" fill="rgb(252,105,26)" fg:x="145957" fg:w="449"/><text x="98.5952%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (352 samples, 0.24%)</title><rect x="98.4105%" y="181" width="0.2372%" height="15" fill="rgb(220,39,43)" fg:x="146054" fg:w="352"/><text x="98.6605%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (351 samples, 0.24%)</title><rect x="98.4112%" y="165" width="0.2365%" height="15" fill="rgb(229,68,48)" fg:x="146055" fg:w="351"/><text x="98.6612%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (349 samples, 0.24%)</title><rect x="98.4125%" y="149" width="0.2352%" height="15" fill="rgb(252,8,32)" fg:x="146057" fg:w="349"/><text x="98.6625%" y="159.50"></text></g><g><title>ga-permutation`rand::rng::Rng::gen (84 samples, 0.06%)</title><rect x="98.6531%" y="213" width="0.0566%" height="15" fill="rgb(223,20,43)" fg:x="146414" fg:w="84"/><text x="98.9031%" y="223.50"></text></g><g><title>ga-permutation`rand_chacha::guts::refill_wide::impl_avx2 (43 samples, 0.03%)</title><rect x="98.6807%" y="197" width="0.0290%" height="15" fill="rgb(229,81,49)" fg:x="146455" fg:w="43"/><text x="98.9307%" y="207.50"></text></g><g><title>ga-permutation`rand::rng::Rng::sample (97 samples, 0.07%)</title><rect x="98.7097%" y="213" width="0.0654%" height="15" fill="rgb(236,28,36)" fg:x="146498" fg:w="97"/><text x="98.9597%" y="223.50"></text></g><g><title>ga-permutation`rand_chacha::guts::refill_wide::impl_avx2 (28 samples, 0.02%)</title><rect x="98.7562%" y="197" width="0.0189%" height="15" fill="rgb(249,185,26)" fg:x="146567" fg:w="28"/><text x="99.0062%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (15 samples, 0.01%)</title><rect x="98.8855%" y="181" width="0.0101%" height="15" fill="rgb(249,174,33)" fg:x="146759" fg:w="15"/><text x="99.1355%" y="191.50"></text></g><g><title>ga-permutation`ga_permutation::ga::repair_mechanism::impl$0::repair (14,017 samples, 9.44%)</title><rect x="89.4645%" y="229" width="9.4446%" height="15" fill="rgb(233,201,37)" fg:x="132777" fg:w="14017"/><text x="89.7145%" y="239.50">ga-permutation..</text></g><g><title>ntdll`RtlAllocateHeap (194 samples, 0.13%)</title><rect x="98.7784%" y="213" width="0.1307%" height="15" fill="rgb(221,78,26)" fg:x="146600" fg:w="194"/><text x="99.0284%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (160 samples, 0.11%)</title><rect x="98.8013%" y="197" width="0.1078%" height="15" fill="rgb(250,127,30)" fg:x="146634" fg:w="160"/><text x="99.0513%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (19 samples, 0.01%)</title><rect x="98.8963%" y="181" width="0.0128%" height="15" fill="rgb(230,49,44)" fg:x="146775" fg:w="19"/><text x="99.1463%" y="191.50"></text></g><g><title>VCRUNTIME140`memcpy (65 samples, 0.04%)</title><rect x="99.5027%" y="213" width="0.0438%" height="15" fill="rgb(229,67,23)" fg:x="147675" fg:w="65"/><text x="99.7527%" y="223.50"></text></g><g><title>ga-permutation`ga_permutation::ga::survivor_selection::impl$2::select_survivors (1,114 samples, 0.75%)</title><rect x="98.9091%" y="229" width="0.7506%" height="15" fill="rgb(249,83,47)" fg:x="146794" fg:w="1114"/><text x="99.1591%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (157 samples, 0.11%)</title><rect x="99.5539%" y="213" width="0.1058%" height="15" fill="rgb(215,43,3)" fg:x="147751" fg:w="157"/><text x="99.8039%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (125 samples, 0.08%)</title><rect x="99.5755%" y="197" width="0.0842%" height="15" fill="rgb(238,154,13)" fg:x="147783" fg:w="125"/><text x="99.8255%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (182 samples, 0.12%)</title><rect x="99.6786%" y="213" width="0.1226%" height="15" fill="rgb(219,56,2)" fg:x="147936" fg:w="182"/><text x="99.9286%" y="223.50"></text></g><g><title>ga-permutation`ga_permutation::ga::GA::start (148,312 samples, 99.93%)</title><rect x="0.0317%" y="245" width="99.9319%" height="15" fill="rgb(233,0,4)" fg:x="47" fg:w="148312"/><text x="0.2817%" y="255.50">ga-permutation`ga_permutation::ga::GA::start</text></g><g><title>ntdll`RtlFreeHeap (446 samples, 0.30%)</title><rect x="99.6631%" y="229" width="0.3005%" height="15" fill="rgb(235,30,7)" fg:x="147913" fg:w="446"/><text x="99.9131%" y="239.50"></text></g><g><title>ntdll`RtlMoveMemory (241 samples, 0.16%)</title><rect x="99.8012%" y="213" width="0.1624%" height="15" fill="rgb(250,79,13)" fg:x="148118" fg:w="241"/><text x="100.0512%" y="223.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (22 samples, 0.01%)</title><rect x="99.9488%" y="197" width="0.0148%" height="15" fill="rgb(211,146,34)" fg:x="148337" fg:w="22"/><text x="100.1988%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (22 samples, 0.01%)</title><rect x="99.9488%" y="181" width="0.0148%" height="15" fill="rgb(228,22,38)" fg:x="148337" fg:w="22"/><text x="100.1988%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (22 samples, 0.01%)</title><rect x="99.9488%" y="165" width="0.0148%" height="15" fill="rgb(235,168,5)" fg:x="148337" fg:w="22"/><text x="100.1988%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (22 samples, 0.01%)</title><rect x="99.9488%" y="149" width="0.0148%" height="15" fill="rgb(221,155,16)" fg:x="148337" fg:w="22"/><text x="100.1988%" y="159.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (22 samples, 0.01%)</title><rect x="99.9488%" y="133" width="0.0148%" height="15" fill="rgb(215,215,53)" fg:x="148337" fg:w="22"/><text x="100.1988%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (22 samples, 0.01%)</title><rect x="99.9488%" y="117" width="0.0148%" height="15" fill="rgb(223,4,10)" fg:x="148337" fg:w="22"/><text x="100.1988%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (20 samples, 0.01%)</title><rect x="99.9501%" y="101" width="0.0135%" height="15" fill="rgb(234,103,6)" fg:x="148339" fg:w="20"/><text x="100.2001%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (19 samples, 0.01%)</title><rect x="99.9508%" y="85" width="0.0128%" height="15" fill="rgb(227,97,0)" fg:x="148340" fg:w="19"/><text x="100.2008%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (19 samples, 0.01%)</title><rect x="99.9508%" y="69" width="0.0128%" height="15" fill="rgb(234,150,53)" fg:x="148340" fg:w="19"/><text x="100.2008%" y="79.50"></text></g><g><title>ntdll`ZwFreeVirtualMemory (19 samples, 0.01%)</title><rect x="99.9508%" y="53" width="0.0128%" height="15" fill="rgb(228,201,54)" fg:x="148340" fg:w="19"/><text x="100.2008%" y="63.50"></text></g><g><title>ga-permutation`serde_json::de::from_reader&lt;std::io::buffered::bufreader::BufReader (32 samples, 0.02%)</title><rect x="99.9636%" y="229" width="0.0216%" height="15" fill="rgb(222,22,37)" fg:x="148359" fg:w="32"/><text x="100.2136%" y="239.50"></text></g><g><title>ga-permutation`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (32 samples, 0.02%)</title><rect x="99.9636%" y="213" width="0.0216%" height="15" fill="rgb(237,53,32)" fg:x="148359" fg:w="32"/><text x="100.2136%" y="223.50"></text></g><g><title>ga-permutation`serde_json::de::impl$7::deserialize_seq&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$19::deserialize::VecVisitor&lt;alloc::vec::Vec (26 samples, 0.02%)</title><rect x="99.9677%" y="197" width="0.0175%" height="15" fill="rgb(233,25,53)" fg:x="148365" fg:w="26"/><text x="100.2177%" y="207.50"></text></g><g><title>ga-permutation`serde::de::impls::impl$19::deserialize::impl$0::visit_seq&lt;alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;,serde_json::de::SeqAccess&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (26 samples, 0.02%)</title><rect x="99.9677%" y="181" width="0.0175%" height="15" fill="rgb(210,40,34)" fg:x="148365" fg:w="26"/><text x="100.2177%" y="191.50"></text></g><g><title>ga-permutation`serde_json::de::impl$9::next_element_seed&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,core::marker::PhantomData&lt;alloc::vec::Vec (26 samples, 0.02%)</title><rect x="99.9677%" y="165" width="0.0175%" height="15" fill="rgb(241,220,44)" fg:x="148365" fg:w="26"/><text x="100.2177%" y="175.50"></text></g><g><title>ga-permutation`serde_json::de::impl$7::deserialize_seq&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$19::deserialize::VecVisitor (26 samples, 0.02%)</title><rect x="99.9677%" y="149" width="0.0175%" height="15" fill="rgb(235,28,35)" fg:x="148365" fg:w="26"/><text x="100.2177%" y="159.50"></text></g><g><title>ga-permutation`serde::de::impls::impl$19::deserialize::impl$0::visit_seq&lt;f64,serde_json::de::SeqAccess&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (26 samples, 0.02%)</title><rect x="99.9677%" y="133" width="0.0175%" height="15" fill="rgb(210,56,17)" fg:x="148365" fg:w="26"/><text x="100.2177%" y="143.50"></text></g><g><title>ga-permutation`serde_json::de::impl$9::next_element_seed&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,core::marker::PhantomData (24 samples, 0.02%)</title><rect x="99.9690%" y="117" width="0.0162%" height="15" fill="rgb(224,130,29)" fg:x="148367" fg:w="24"/><text x="100.2190%" y="127.50"></text></g><g><title>ga-permutation`ga_permutation::ga::problem::InstanceDescription::from_file&lt;ref$ (33 samples, 0.02%)</title><rect x="99.9636%" y="245" width="0.0222%" height="15" fill="rgb(235,212,8)" fg:x="148359" fg:w="33"/><text x="100.2136%" y="255.50"></text></g><g><title>ga-permutation`main (148,354 samples, 99.96%)</title><rect x="0.0290%" y="325" width="99.9602%" height="15" fill="rgb(223,33,50)" fg:x="43" fg:w="148354"/><text x="0.2790%" y="335.50">ga-permutation`main</text></g><g><title>ga-permutation`std::rt::lang_start_internal (148,354 samples, 99.96%)</title><rect x="0.0290%" y="309" width="99.9602%" height="15" fill="rgb(219,149,13)" fg:x="43" fg:w="148354"/><text x="0.2790%" y="319.50">ga-permutation`std::rt::lang_start_internal</text></g><g><title>ga-permutation`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (148,353 samples, 99.96%)</title><rect x="0.0296%" y="293" width="99.9596%" height="15" fill="rgb(250,156,29)" fg:x="44" fg:w="148353"/><text x="0.2796%" y="303.50">ga-permutation`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>ga-permutation`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (148,353 samples, 99.96%)</title><rect x="0.0296%" y="277" width="99.9596%" height="15" fill="rgb(216,193,19)" fg:x="44" fg:w="148353"/><text x="0.2796%" y="287.50">ga-permutation`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>ga-permutation`ga_permutation::main (148,353 samples, 99.96%)</title><rect x="0.0296%" y="261" width="99.9596%" height="15" fill="rgb(216,135,14)" fg:x="44" fg:w="148353"/><text x="0.2796%" y="271.50">ga-permutation`ga_permutation::main</text></g><g><title>ga-permutation`__scrt_common_main_seh (148,364 samples, 99.97%)</title><rect x="0.0283%" y="341" width="99.9670%" height="15" fill="rgb(241,47,5)" fg:x="42" fg:w="148364"/><text x="0.2783%" y="351.50">ga-permutation`__scrt_common_main_seh</text></g><g><title>all (148,413 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="148413"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`RtlUserThreadStart (148,373 samples, 99.97%)</title><rect x="0.0270%" y="373" width="99.9730%" height="15" fill="rgb(231,13,6)" fg:x="40" fg:w="148373"/><text x="0.2770%" y="383.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (148,371 samples, 99.97%)</title><rect x="0.0283%" y="357" width="99.9717%" height="15" fill="rgb(207,181,40)" fg:x="42" fg:w="148371"/><text x="0.2783%" y="367.50">KERNEL32`BaseThreadInitThunk</text></g></svg></svg>